# .github/workflows/deploy.yml

name: Deploy Task Manager to EC2

on:
  push:
    branches:
      - main # This workflow runs on every push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a Node.js version compatible with your project

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Deploy to EC2 with SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".next, public, package.json, package-lock.json, prisma, next.config.ts, .env"
          target: "/home/ubuntu/task-manager" # Target directory on the EC2 instance
          strip_components: 1

      - name: Execute deployment commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create a directory for the app if it doesn't exist
            mkdir -p /home/ubuntu/task-manager
            cd /home/ubuntu/task-manager

            # Create the production .env file from GitHub Secrets
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

            # Install production dependencies
            npm install --production

            # Run Prisma migrations for production
            npx prisma migrate deploy

            # Start or restart the application with PM2
            # The --update-env flag is key to ensure it uses the new .env file
            pm2 start "npm start" --name "task-manager" --update-env || pm2 restart task-manager