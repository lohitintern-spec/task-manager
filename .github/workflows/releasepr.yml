name: Deploy and Release on Merge

# We ONLY trigger on a merged Pull Request. No more confusion.
on:
  pull_request:
    branches: [release]
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  # This single job handles everything in sequence.
  deploy_and_release:
    # This 'if' condition ensures the job only runs if the PR was merged.
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          # Fetch all history so release-please can analyze commits
          fetch-depth: 0

      # Step 2: Deploy to your server
      - name: 'Deploy to Production'
        run: |
          echo "ðŸš€ Deploying to Production..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "âœ… Production deployment complete!"
          # Your real EC2 deployment commands would go here.

      # Step 3: Create the GitHub Release and Tag
      # This step will only run if the deployment step above succeeds.
      - name: 'Run Release Please'
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This is the "no extra PRs" mode that finds conventional
          # commits from the merge and creates the release directly.
          skip-github-pull-request: true
          release-type: node # Or 'simple' if you don't use package.json

      # Step 4: Show the results (this will run when a release is made)
      - name: 'Show Release Results'
        if: ${{ steps.release.outputs.release_created }}
        run: |
          echo "ðŸŽ‰ New release created!"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "URL: ${{ steps.release.outputs.html_url }}"