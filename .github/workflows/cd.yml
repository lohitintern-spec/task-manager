name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - "main"

env:
  ECR_REPOSITORY: taskmanager
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log in to ECR on the EC2 runner
        # This command uses the AWS CLI to authenticate the Docker daemon
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Retag the current running image as 'previous'
        run: |
          OLD_IMAGE_ID=$(docker images -q ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest)
          if [ -n "$OLD_IMAGE_ID" ]; then
            docker tag $OLD_IMAGE_ID ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:previous || true
            echo "Successfully retagged old image as 'previous'"
          else
            echo "No 'latest' image found to tag as 'previous'. This may be the first run."
          fi

      - name: Pull the latest Docker image
        run: docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Stop and remove old container
        run: |
          docker stop task-manager-app || true
          docker rm task-manager-app || true

      - name: Run the new container
        run: docker run -d --name task-manager-app -p 8080:3000 ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Clean up old Docker images
        run: docker image prune -f